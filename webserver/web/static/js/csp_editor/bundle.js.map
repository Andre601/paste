{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/arrayWithHoles.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","node_modules/@babel/runtime/helpers/nonIterableRest.js","node_modules/@babel/runtime/helpers/slicedToArray.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/computed-style/dist/computedStyle.commonjs.js","node_modules/regenerator-runtime/runtime.js","src/ts/editor.ts","src/ts/lineHeight.ts","src/ts/main.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","arr","Array","isArray","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","fn","self","this","args","arguments","apply","err","undefined","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","protoProps","staticProps","prototype","obj","__esModule","default","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","push","arrayWithHoles","iterableToArrayLimit","nonIterableRest","el","prop","getComputedStyle","style","window","currentStyle","replace","word","letter","toUpperCase","runtime","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","GenStateSuspendedYield","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","lineHeight_1","Editor","root","_this","highlighter","defaultHighlighter","_classCallCheck2","matches","Map","skips","addEventListener","onKeyDown","onInput","highlight","s","start","selectionStart","end","selectionEnd","withInsert","substring","lastOffset","offset","indexOf","line","lastSpaces","guesses","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","linesOf","_spaces","countLeadingSpaces","difference","Math","abs","guess","has","existingGuesses","get","set","size","from","entries","sort","b","reduce","curr","spaces","amount","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","lastNewline","findPreviousNewline","nextNewline","findNextNewline","_this$getCurrentLineI","getCurrentLineIndices","_this$getCurrentLineI2","_slicedToArray2","_this$getCurrentLineI3","_this$getCurrentLineI4","getCurrentLine","getIndentSize","event","shift","shiftKey","skipped","includes","newStart","preventDefault","insertAtCaret","concat","right","left","_start","_left","_right","indentSize","indentLevel","getCurrentLineIndent","nextIndent","repeat","indent","leftChar","rightChar","needsIndent","finalIndent","closing","before","after","_start2","prevNewline","multi","_indentSize","lines","shiftAmount","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","getLinesBetween","newSpaces","max","caret","join","_this$getCurrentLineI5","_this$getCurrentLineI6","_start3","_end","_line","startSpaces","_newStart","actualStop","newline","startIndex","endIndex","elem","lh","lineHeight","wrapper","mod","scrollTop","transform","scrollLeft","firstElementChild","appendChild","replaceChild","text","startLine","trunc","endLine","ceil","clientHeight","getLineIndex","getHighlightText","_this2","replaceHighlightContents","input","defaultPrevented","oldStart","oldEnd","wrapped","autocomplete","autocapitalize","setAttribute","spellcheck","document","createElement","classList","add","parentNode","insertBefore","pre","innerText","computedStyle","node","lnHeightStr","lnHeight","parseFloat","_lnHeightStyle","nodeName","_node","innerHTML","fontSizeStr","fontSize","padding","border","body","offsetHeight","removeChild","editor_1","editor_2"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","module.exports = require(\"regenerator-runtime\");\n","// DEV: We don't use var but favor parameters since these play nicer with minification\nfunction computedStyle(el, prop, getComputedStyle, style) {\n  getComputedStyle = window.getComputedStyle;\n  style =\n      // If we have getComputedStyle\n      getComputedStyle ?\n        // Query it\n        // TODO: From CSS-Query notes, we might need (node, null) for FF\n        getComputedStyle(el) :\n\n      // Otherwise, we are in IE and use currentStyle\n        el.currentStyle;\n  if (style) {\n    return style\n    [\n      // Switch to camelCase for CSSOM\n      // DEV: Grabbed from jQuery\n      // https://github.com/jquery/jquery/blob/1.9-stable/src/css.js#L191-L194\n      // https://github.com/jquery/jquery/blob/1.9-stable/src/core.js#L593-L597\n      prop.replace(/-(\\w)/gi, function (word, letter) {\n        return letter.toUpperCase();\n      })\n    ];\n  }\n}\n\nmodule.exports = computedStyle;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import { lineHeight } from './lineHeight';\n\nexport class Editor {\n  private wrapped: boolean;\n  private wrapper: HTMLDivElement;\n\n  /**\n   * Map of opening characters to add matching closing characters to after typing.\n   */\n  private matches: Map<string, string> = new Map([\n    ['(', ')'],\n    ['{', '}'],\n    ['[', ']'],\n    ['\"', '\"'],\n  ]);\n\n  /**\n   * Array of characters to skip over when typed.\n   */\n  private skips: string[] = [\n    ')',\n    '}',\n    ']',\n    '\"',\n  ];\n\n  public constructor(public root: HTMLTextAreaElement, public highlighter: (input: string) => Promise<HTMLElement> = Editor.defaultHighlighter) {\n    this.wrap();\n    this.root.addEventListener('keydown', e => this.onKeyDown(e));\n    this.root.addEventListener('input', () => this.onInput());\n    this.root.addEventListener('scroll', () => this.highlight());\n    this.highlight();\n  }\n\n  /**\n   * Insert text at the caret.\n   *\n   * @param s Text to insert\n   */\n  private insertAtCaret(s: string): void {\n    const start = this.root.selectionStart;\n    const end = this.root.selectionEnd;\n    const withInsert = this.root.value.substring(0, start) +  s + this.root.value.substring(end);\n    this.root.value = withInsert;\n    this.root.selectionStart = start + 1;\n    this.root.selectionEnd = start + 1;\n  }\n\n  /**\n   * Creates a generator that returns each line of a string.\n   *\n   * @param s String to get lines of\n   * @returns generator\n   */\n  private *linesOf(s: string): IterableIterator<string> {\n    let lastOffset = -1;\n    while (true) {\n      const offset = s.substring(lastOffset + 1).indexOf('\\n');\n      const line = s.substring(\n        lastOffset + 1,\n        offset === -1\n          ? undefined // if another match wasn't found, get the rest of the string\n          : offset + lastOffset + 1, // otherwise get up to the next match\n      );\n      yield line;\n      // if another match wasn't found, break\n      if (offset === -1) {\n        break;\n      }\n      lastOffset = offset + lastOffset + 1;\n    }\n  }\n\n  /**\n   * Guesses the indent size of the editor. Defaults to 2.\n   *\n   * @returns number indent size in spaces\n   */\n  private getIndentSize(): number {\n    let lastSpaces = null;\n    const guesses: Map<number, number> = new Map();\n\n    for (const line of this.linesOf(this.root.value)) {\n      const spaces = this.countLeadingSpaces(line);\n      if (spaces === 0) {\n        continue;\n      }\n      if (lastSpaces === null) {\n        lastSpaces = spaces;\n      }\n\n      const difference = Math.abs(spaces - lastSpaces);\n      // if the both the leading spaces and the difference between the leading spaces of both lines\n      // is greater than 8, ignore it. sane people don't indent by this much\n      if (spaces > 8 && (difference === 0 || difference > 8)) {\n        continue;\n      }\n      // if this line's space count is the same as the last line, guess that amount\n      // otherwise, guess absolute value of the difference (most likely an in/outdent)\n      const guess = spaces === lastSpaces ? spaces : difference;\n      if (guesses.has(guess)) {\n        const existingGuesses = guesses.get(guess);\n        // if we've guessed this number 10 times, it's probably correct\n        // note this checks for 9 because 9 previous guesses + this guess = 10 guesses\n        if (existingGuesses === 9) {\n          return guess;\n        }\n        guesses.set(guess, existingGuesses + 1);\n      } else {\n        guesses.set(guess, 1);\n      }\n\n      lastSpaces = spaces;\n    }\n\n    if (guesses.size === 0) {\n      // if there are no guesses, guess the number of spaces on the first line\n      const spaces = this.countLeadingSpaces(this.root.value);\n      // if the number of spaces on the first line is zero, however, default to 2 spaces\n      if (spaces === 0) {\n        return 2;\n      }\n\n      return spaces;\n    }\n\n    // return the guess that was guessed the most\n    return Array.from(guesses.entries())\n      .sort((a, b) => a < b ? 1 : -1)\n      .reduce((prev, curr) => prev[1] > curr[1] ? prev : curr)[0];\n  }\n\n  /**\n   * Counts the number of spaces at the start of the given string.\n   *\n   * @param s string to examine\n   * @returns number of spaces\n   */\n  private countLeadingSpaces(s: string): number {\n    let amount = 0;\n\n    for (const char of s) {\n      if (char === ' ') {\n        amount += 1;\n        continue;\n      }\n\n      break;\n    }\n\n    return amount;\n  }\n\n  private getCurrentLineIndices(): [number, number] {\n    // find the previous and next newline from the selection start\n    let lastNewline = this.findPreviousNewline(this.root.selectionStart - 1);\n    if (lastNewline === null) {\n      lastNewline = -1;\n    }\n    let nextNewline = this.findNextNewline(this.root.selectionStart);\n    if (nextNewline === null) {\n      nextNewline = this.root.value.length;\n    }\n\n    return [lastNewline + 1, nextNewline];\n  }\n\n  /**\n   * Gets the line that the selection start is located in.\n   *\n   * @returns line\n   */\n  private getCurrentLine(): string {\n    const [lastNewline, nextNewline] = this.getCurrentLineIndices();\n    // get what's in between them\n    return this.root.value.substring(lastNewline, nextNewline);\n  }\n\n  private setCurrentLine(line: string): void {\n    const [lastNewline, nextNewline] = this.getCurrentLineIndices();\n    this.root.value = this.root.value.substring(0, lastNewline) + line + this.root.value.substring(nextNewline);\n  }\n\n  /**\n   * Get the indent level of the line the selection start is in.\n   *\n   * @returns indent level\n   */\n  private getCurrentLineIndent(): number {\n    const line = this.getCurrentLine();\n\n    const spaces = this.countLeadingSpaces(line);\n    if (spaces === 0) {\n      return 0;\n    }\n\n    return spaces / this.getIndentSize();\n  }\n\n  /**\n   * Handles textarea input.\n   */\n  private input(event: KeyboardEvent): void {\n    const key = event.key;\n    const shift = event.shiftKey;\n\n    let skipped = false;\n    // only move cursor for closing already-existing brackets\n    if (this.skips.includes(key) && key === this.root.value[this.root.selectionEnd]) {\n      const newStart = this.root.selectionEnd + 1;\n      this.root.selectionStart = newStart;\n      this.root.selectionEnd = newStart;\n      event.preventDefault();\n      skipped = true;\n    }\n\n    // insert matching brackets\n    if (this.matches.has(key) && !(key === '\"' && skipped)) {\n      this.insertAtCaret(`${event.key}${this.matches.get(key)}`);\n      event.preventDefault();\n    }\n\n    // remove matching braces\n    if (key === 'Backspace') {\n      // only remove matching braces if no selection\n      if (this.root.selectionStart !== this.root.selectionEnd) {\n        return;\n      }\n\n      const start = this.root.selectionStart;\n      const right = this.root.value[start];\n      const left = this.root.value[start - 1];\n\n      if (right === this.matches.get(left)) {\n        this.root.value = this.root.value.substring(0, start - 1) + this.root.value.substring(start + 1);\n\n        this.root.selectionStart = start - 1;\n        this.root.selectionEnd = start - 1;\n\n        event.preventDefault();\n      }\n    }\n\n    // indent\n    if (key === 'Enter') {\n      const start = this.root.selectionStart;\n\n      const left = this.root.value.substring(0, start);\n      const right = this.root.value.substring(this.root.selectionEnd);\n\n      const indentSize = this.getIndentSize();\n      const indentLevel = this.getCurrentLineIndent();\n      const nextIndent = ' '.repeat(indentSize * (indentLevel + 1));\n      const indent = ' '.repeat(indentSize * indentLevel);\n\n      const leftChar = this.root.value[start - 1];\n      const rightChar = this.root.value[start];\n      const needsIndent = this.matches.has(leftChar);\n      const isPair = needsIndent && rightChar === this.matches.get(leftChar);\n\n      const finalIndent = needsIndent ? nextIndent : indent;\n      const closing = isPair ? `\\n${indent}` : '';\n\n      this.root.value = `${left}\\n${finalIndent}${closing}${right}`;\n      this.root.selectionStart = start + 1 + finalIndent.length;\n      this.root.selectionEnd = this.root.selectionStart;\n      event.preventDefault();\n    }\n\n    if (key === 'Tab') {\n      event.preventDefault();\n\n      const start = this.root.selectionStart;\n      const end = this.root.selectionEnd;\n      const prevNewline = this.findPreviousNewline(this.root.selectionStart - 1);\n      const nextNewline = this.findNextNewline(this.root.selectionEnd);\n      const multi = this.root.selectionStart !== this.root.selectionEnd;\n      let before;\n      if (prevNewline === null) {\n        before = '';\n      } else {\n        before = this.root.value.substring(0, prevNewline + 1);\n      }\n      let after;\n      if (nextNewline === null) {\n        after = '';\n      } else {\n        after = this.root.value.substring(nextNewline);\n      }\n      const indentSize = this.getIndentSize();\n      const lines = [];\n      let shiftAmount = 0;\n      for (const line of this.getLinesBetween(this.root.selectionStart, this.root.selectionEnd)) {\n        if (shift) {\n          const spaces = this.countLeadingSpaces(line.value);\n          if (spaces === 0) {\n            lines.push(line.value);\n            continue;\n          }\n\n          const newSpaces = Math.max(0, spaces - indentSize);\n          lines.push(' '.repeat(newSpaces) + line.value.substring(spaces));\n\n          const atStartOfLine = prevNewline === this.root.selectionStart;\n          shiftAmount += atStartOfLine\n            ? 0\n            : spaces < indentSize ? -spaces : -indentSize;\n\n          continue;\n        }\n\n        if (multi) {\n          lines.push(' '.repeat(indentSize) + line.value);\n        } else {\n          const caret = start - prevNewline - 1;\n          lines.push(`${line.value.substring(0, caret)}${' '.repeat(indentSize)}${line.value.substring(caret)}`);\n        }\n        shiftAmount += indentSize;\n      }\n      this.root.value = before + lines.join('\\n') + after;\n      if (multi) {\n        this.root.selectionStart = start;\n        if (lines.length === 1) {\n          this.root.selectionEnd = end;\n        } else {\n          this.root.selectionEnd = end + shiftAmount;\n        }\n      } else {\n        this.root.selectionStart = start + shiftAmount;\n        this.root.selectionEnd = this.root.selectionStart;\n      }\n    }\n\n    if (key === 'Home') {\n      event.preventDefault();\n      const [start, end] = this.getCurrentLineIndices();\n      const line = this.root.value.substring(start, end);\n      const spaces = this.countLeadingSpaces(line);\n      const startSpaces = start + spaces;\n      const newStart = this.root.selectionStart === startSpaces ? start : startSpaces;\n      this.root.selectionStart = newStart;\n      if (!shift) {\n        this.root.selectionEnd = this.root.selectionStart;\n      }\n    }\n  }\n\n  private findNextNewline(start: number, stop: number = null): number {\n    const actualStop = stop === null ? this.root.value.length : stop;\n    for (let i = start; i < actualStop; i++) {\n      if (this.root.value[i] === '\\n') {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  private findPreviousNewline(start: number, stop: number = null): number {\n    const actualStop = stop === null ? 0 : stop;\n    for (let i = start; i >= actualStop; i--) {\n      if (this.root.value[i] === '\\n') {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  private *getLinesBetween(start: number, end: number): IterableIterator<Line> {\n    // find the first newline before or at the selection start\n    let newline = this.findPreviousNewline(start - 1);\n    // use that newline or the start of the input if none was found\n    let startIndex = newline === null ? -1 : newline;\n    // for each newline found before the end of the selection, yield that substring\n    for (let i = start; i < end; i++) {\n      if (this.root.value[i] === '\\n') {\n        yield {\n          start: startIndex + 1,\n          end: i,\n          value: this.root.value.substring(startIndex + 1, i),\n        };\n        startIndex = i;\n      }\n    }\n    // find the last newline after or at the selection end\n    newline = this.findNextNewline(end);\n    // use that newline or the end of the input if none found\n    const endIndex = newline === null ? this.root.value.length : newline;\n    // if the indices are the same, return the empty string\n    if (startIndex === endIndex) {\n      return yield {\n        start: startIndex,\n        end: endIndex,\n        value: '',\n      };\n    }\n    // yield the final substring\n    return yield {\n      start: startIndex + 1,\n      end: endIndex,\n      value: this.root.value.substring(startIndex + 1, endIndex),\n    };\n  }\n\n  private replaceHighlightContents(elem: HTMLElement): void {\n    const lh = lineHeight(this.wrapper);\n    let mod = -(this.root.scrollTop % lh);\n    // Not using Number.EPSILON because the case in which this happens is slightly less accurate\n    if (Math.abs(lh + mod) < 0.00001) {\n      mod = 0;\n    }\n    elem.style.transform = `translate3d(${this.root.scrollLeft}px, ${mod}px, 0)`;\n    // only need to transform by the negative modulus thing - huge performance save (but fucks with a line?)\n    const highlight = this.wrapper.firstElementChild;\n    if (highlight.firstElementChild === null) {\n      highlight.appendChild(elem);\n    } else {\n      highlight.replaceChild(elem, highlight.firstElementChild);\n    }\n  }\n\n  private getLineIndex(text: string, line: number): number {\n    // the first line starts at index 0 always\n    if (line === 0) {\n      return 0;\n    }\n\n    let offset = -1;\n\n    for (let i = 0; i <= line; i++) {\n      // find the next newline\n      const newline = text.indexOf('\\n', offset + 1);\n      // break out if we found no newlines\n      if (newline === -1) {\n        return null;\n      }\n      // increase the offset\n      offset = newline;\n      // if this is the line we're looking for, return the offset\n      if (i + 1 === line) {\n        return offset + 1;\n      }\n    }\n\n    return null;\n  }\n\n  private getHighlightText(): string {\n    // get the line height of the wrapper, since textareas are apparently bad at this thing\n    const lh = lineHeight(this.wrapper);\n    // find the starting and ending line numbers in view\n    const startLine = Math.trunc(this.root.scrollTop / lh);\n    const endLine = Math.ceil((this.root.clientHeight + this.root.scrollTop) / lh);\n    // grab the text here and re-use it: this makes the code much faster\n    const text = this.root.value;\n    // get the indices of the start and end lines\n    const startIndex = this.getLineIndex(text, startLine);\n    let endIndex = this.getLineIndex(text, endLine);\n    if (endIndex === null) {\n      endIndex = text.length;\n    }\n    const textInView = text.substring(startIndex, endIndex);\n    return textInView;\n  }\n\n  private async highlight(): Promise<void> {\n    this.highlighter(this.getHighlightText())\n      .then(elem => this.replaceHighlightContents(elem));\n  }\n\n  private onKeyDown(event: KeyboardEvent): void {\n    this.input(event);\n    if (event.defaultPrevented) {\n      this.onInput();\n    }\n  }\n\n  private onInput(): void {\n    this.highlight();\n  }\n\n  private shiftSelectionAfter(amount: number, f: Function): void {\n    const oldStart = this.root.selectionStart;\n    const oldEnd = this.root.selectionEnd;\n    f();\n    this.root.selectionStart = oldStart + amount;\n    this.root.selectionEnd = oldEnd + amount;\n  }\n\n  private shiftSelection(amount: number): void {\n    const oldStart = this.root.selectionStart;\n    const oldEnd = this.root.selectionEnd;\n    this.root.selectionStart = oldStart + amount;\n    this.root.selectionEnd = oldEnd + amount;\n  }\n\n  private static async defaultHighlighter(input: string): Promise<HTMLElement> {\n    const pre = document.createElement('pre');\n    pre.innerText = input;\n    return pre;\n  }\n\n  private wrap(): void {\n    if (this.wrapped) {\n      return;\n    }\n\n    this.root.autocomplete = 'off';\n    this.root.autocapitalize = 'off';\n    this.root.setAttribute('autocorrect', 'off');\n    this.root.spellcheck = false;\n\n    const highlight = document.createElement('div');\n    highlight.classList.add('highlight');\n\n    const wrapper = document.createElement('div');\n    wrapper.classList.add('editor');\n    this.root.parentNode.insertBefore(wrapper, this.root);\n    wrapper.appendChild(highlight);\n    wrapper.appendChild(this.root);\n\n    this.wrapped = true;\n    this.wrapper = wrapper;\n  }\n}\n\ninterface Line {\n  start: number;\n  end: number;\n  value: string;\n}\n","// Load in dependencies\nimport * as computedStyle from 'computed-style';\n\n/**\n * Calculate the `line-height` of a given node\n * @param {HTMLElement} node Element to calculate line height of. Must be in the DOM.\n * @returns {Number} `line-height` of the element in pixels\n */\nexport function lineHeight(node: HTMLElement): number {\n  // Grab the line-height via style\n  let lnHeightStr = computedStyle(node, 'line-height');\n  let lnHeight = parseFloat(lnHeightStr);\n\n  // If the lineHeight did not contain a unit (i.e. it was numeric), convert it to ems (e.g. '2.3' === '2.3em')\n  if (lnHeightStr === lnHeight.toString()) {\n    // Save the old lineHeight style and update the em unit to the element\n    const _lnHeightStyle = node.style.lineHeight;\n    node.style.lineHeight = `${lnHeightStr}em`;\n\n    // Calculate the em based height\n    lnHeightStr = computedStyle(node, 'line-height');\n    lnHeight = parseFloat(lnHeightStr);\n\n    // Revert the lineHeight style\n    if (_lnHeightStyle) {\n      node.style.lineHeight = _lnHeightStyle;\n    } else {\n      delete node.style.lineHeight;\n    }\n  }\n\n  // If the lineHeight is in `pt`, convert it to pixels (4px for 3pt)\n  // DEV: `em` units are converted to `pt` in IE6\n  // Conversion ratio from https://developer.mozilla.org/en-US/docs/Web/CSS/length\n  if (lnHeightStr.indexOf('pt') !== -1) {\n    lnHeight *= 4;\n    lnHeight /= 3;\n  // Otherwise, if the lineHeight is in `mm`, convert it to pixels (96px for 25.4mm)\n  } else if (lnHeightStr.indexOf('mm') !== -1) {\n    lnHeight *= 96;\n    lnHeight /= 25.4;\n  // Otherwise, if the lineHeight is in `cm`, convert it to pixels (96px for 2.54cm)\n  } else if (lnHeightStr.indexOf('cm') !== -1) {\n    lnHeight *= 96;\n    lnHeight /= 2.54;\n  // Otherwise, if the lineHeight is in `in`, convert it to pixels (96px for 1in)\n  } else if (lnHeightStr.indexOf('in') !== -1) {\n    lnHeight *= 96;\n  // Otherwise, if the lineHeight is in `pc`, convert it to pixels (12pt for 1pc)\n  } else if (lnHeightStr.indexOf('pc') !== -1) {\n    lnHeight *= 16;\n  }\n\n  // If the line-height is \"normal\", calculate by font-size\n  if (lnHeightStr === 'normal') {\n    // Create a temporary node\n    const nodeName = node.nodeName;\n    const _node = document.createElement(nodeName);\n    _node.innerHTML = '&nbsp;';\n\n    // If we have a text area, reset it to only 1 row\n    // https://github.com/twolfson/line-height/issues/4\n    if (nodeName.toUpperCase() === 'TEXTAREA') {\n      _node.setAttribute('rows', '1');\n    }\n\n    // Set the font-size of the element\n    const fontSizeStr = computedStyle(node, 'font-size');\n    _node.style.fontSize = fontSizeStr;\n\n    // Remove default padding/border which can affect offset height\n    // https://github.com/twolfson/line-height/issues/4\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight\n    _node.style.padding = '0px';\n    _node.style.border = '0px';\n\n    // Append it to the body\n    const body = document.body;\n    body.appendChild(_node);\n\n    // Assume the line height of the element is the height\n    const height = _node.offsetHeight;\n    lnHeight = height;\n\n    // Remove our child from the DOM\n    body.removeChild(_node);\n  }\n\n  // Return the calculated height\n  return lnHeight;\n}\n","import { Editor } from './editor';\nexport { Editor } from './editor';\n\nObject.defineProperty(window, 'Editor', {\n  value: Editor,\n});\n"]}