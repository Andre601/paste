use diesel::{
  backend::Backend,
  deserialize::{self, FromSql},
  Queryable,
  serialize::{self, ToSql},
  sql_types::Text,
};

use failure::format_err;

use rocket::{http::RawStr, request::FromFormValue};

use std::io::Write;

#[derive(Debug, Clone, Copy, PartialEq, Serialize, Deserialize, AsExpression)]
#[sql_type = "Text"]
#[serde(rename_all = "lowercase")]
pub enum Language {
  DotProperties, // .properties
  OneCBsl, // 1C (BSL)
  Abap, // ABAP
  ActionScript,
  Ada,
  Apache,
  ApiBlueprint, // API Blueprint
  AppleScript,
  Awk,
  Biml, // BIML
  Bpf,
  Brainfuck,
  C,
  CSharp, // C#
  CPlusPlus, // C++
  Ceylon,
  CfScript, // CFScript
  Clojure,
  CMake,
  CoffeeScript,
  CommonLisp, // Common Lisp
  ConfigFile, // Config File
  Console,
  Coq,
  Crystal,
  Css, // CSS
  Cuda, // CUDA
  D,
  Dart,
  Diff, // diff
  Digdag, // digdag
  Docker,
  Dot, // DOT
  Eiffel,
  Elixir,
  Elm,
  Erb, // ERB
  Erlang,
  Escape,
  Factor,
  Fortran,
  FSharp,
  GdScript,
  Gherkin,
  Glsl, // GLSL
  Go,
  Gradle,
  Graphql,
  Groovy,
  Hack,
  Haml,
  Handlebars,
  HashicorpConfigurationLanguage, // Hashicorp Configuration Language
  Haskell,
  Hocon,
  Html, // HTML
  Http, // HTTP
  HyLang,
  Idl, // IDL
  IgorPro,
  Ini, // INI
  Io,
  IrbOutput, // Irb_output
  Irb,
  Java,
  JavaScript,
  Jinja,
  JsonDoc, // Json-doc
  Json, // JSON
  Jsonnet,
  Jsp,
  Jsx, // JSX
  Julia,
  Kotlin,
  Lasso,
  Liquid,
  LiterateCoffeeScript, // Literate CoffeeScript
  LiterateHaskell, // Literate Haskell
  Llvm, // LLVM
  Lua,
  M68k,
  Magik,
  Make,
  Markdown,
  Mason,
  Mathematica,
  Matlab, // MATLAB
  MoonScript,
  Mosel,
  Mxml, // MXML
  Nasm,
  Nginx, // nginx
  Nim,
  Nix,
  ObjectiveC, // Objective-C
  OCaml,
  OpenEdgeAbl,
  OpenTypeFeatureFile,
  Pascal,
  Perl,
  Php, // PHP
  PlainText, // Plain Text
  Plist,
  Pony,
  Powershell, // powershell
  Praat,
  Prolog,
  Prometheus,
  Protobuf,
  Puppet,
  Python,
  Q,
  Qml, // QML
  R,
  Racket,
  ReasonMl,
  Ruby,
  Rust,
  Sas,
  Sass,
  Scala,
  Scheme,
  Scss, // SCSS
  Sed, // sed
  Shell, // shell
  Sieve,
  Slim,
  Smalltalk,
  Smarty,
  Sml, // SML
  Sqf, // SQF
  Sql, // SQL
  SuperCollider,
  Swift,
  Tap, // TAP
  Tcl,
  Terraform,
  Tex, // TeX
  Toml, // TOML
  Tulip,
  TurtleTrig, // Turtle/TriG
  Twig,
  TypeScript,
  Vala,
  Verilog, // Verilog and System Verilog
  Vhdl2008, // VHDL 2008
  VimL,
  VisualBasic, // Visual Basic
  Vue,
  Wollok,
  Xml, // XML
  Xojo,
  XPath,
  XQuery,
  Yaml, // YAML
}

impl Language {
  pub const ALL: &'static [Language] = &[
    Language::DotProperties,
    Language::OneCBsl,
    Language::Abap,
    Language::ActionScript,
    Language::Ada,
    Language::Apache,
    Language::ApiBlueprint,
    Language::AppleScript,
    Language::Awk,
    Language::Biml,
    Language::Bpf,
    Language::Brainfuck,
    Language::C,
    Language::CSharp,
    Language::CPlusPlus,
    Language::Ceylon,
    Language::CfScript,
    Language::Clojure,
    Language::CMake,
    Language::CoffeeScript,
    Language::CommonLisp,
    Language::ConfigFile,
    Language::Console,
    Language::Coq,
    Language::Crystal,
    Language::Css,
    Language::Cuda,
    Language::D,
    Language::Dart,
    Language::Diff,
    Language::Digdag,
    Language::Docker,
    Language::Dot,
    Language::Eiffel,
    Language::Elixir,
    Language::Elm,
    Language::Erb,
    Language::Erlang,
    Language::Escape,
    Language::Factor,
    Language::Fortran,
    Language::FSharp,
    Language::GdScript,
    Language::Gherkin,
    Language::Glsl,
    Language::Go,
    Language::Gradle,
    Language::Graphql,
    Language::Groovy,
    Language::Hack,
    Language::Haml,
    Language::Handlebars,
    Language::HashicorpConfigurationLanguage,
    Language::Haskell,
    Language::Hocon,
    Language::Html,
    Language::Http,
    Language::HyLang,
    Language::Idl,
    Language::IgorPro,
    Language::Ini,
    Language::Io,
    Language::IrbOutput,
    Language::Irb,
    Language::Java,
    Language::JavaScript,
    Language::Jinja,
    Language::JsonDoc,
    Language::Json,
    Language::Jsonnet,
    Language::Jsp,
    Language::Jsx,
    Language::Julia,
    Language::Kotlin,
    Language::Lasso,
    Language::Liquid,
    Language::LiterateCoffeeScript,
    Language::LiterateHaskell,
    Language::Llvm,
    Language::Lua,
    Language::M68k,
    Language::Magik,
    Language::Make,
    Language::Markdown,
    Language::Mason,
    Language::Mathematica,
    Language::Matlab,
    Language::MoonScript,
    Language::Mosel,
    Language::Mxml,
    Language::Nasm,
    Language::Nginx,
    Language::Nim,
    Language::Nix,
    Language::ObjectiveC,
    Language::OCaml,
    Language::OpenEdgeAbl,
    Language::OpenTypeFeatureFile,
    Language::Pascal,
    Language::Perl,
    Language::Php,
    Language::PlainText,
    Language::Plist,
    Language::Pony,
    Language::Powershell,
    Language::Praat,
    Language::Prolog,
    Language::Prometheus,
    Language::Protobuf,
    Language::Puppet,
    Language::Python,
    Language::Q,
    Language::Qml,
    Language::R,
    Language::Racket,
    Language::ReasonMl,
    Language::Ruby,
    Language::Rust,
    Language::Sas,
    Language::Sass,
    Language::Scala,
    Language::Scheme,
    Language::Scss,
    Language::Sed,
    Language::Shell,
    Language::Sieve,
    Language::Slim,
    Language::Smalltalk,
    Language::Smarty,
    Language::Sml,
    Language::Sqf,
    Language::Sql,
    Language::SuperCollider,
    Language::Swift,
    Language::Tap,
    Language::Tcl,
    Language::Terraform,
    Language::Tex,
    Language::Toml,
    Language::Tulip,
    Language::TurtleTrig,
    Language::Twig,
    Language::TypeScript,
    Language::Vala,
    Language::Verilog,
    Language::Vhdl2008,
    Language::VimL,
    Language::VisualBasic,
    Language::Vue,
    Language::Wollok,
    Language::Xml,
    Language::Xojo,
    Language::XPath,
    Language::XQuery,
    Language::Yaml,
  ];

  pub fn as_str(self) -> &'static str {
    match self {
      Language::DotProperties => "DotProperties",
      Language::OneCBsl => "OneCBsl",
      Language::Abap => "Abap",
      Language::ActionScript => "ActionScript",
      Language::Ada => "Ada",
      Language::Apache => "Apache",
      Language::ApiBlueprint => "ApiBlueprint",
      Language::AppleScript => "AppleScript",
      Language::Awk => "Awk",
      Language::Biml => "Biml",
      Language::Bpf => "Bpf",
      Language::Brainfuck => "Brainfuck",
      Language::C => "C",
      Language::CSharp => "CSharp",
      Language::CPlusPlus => "CPlusPlus",
      Language::Ceylon => "Ceylon",
      Language::CfScript => "CfScript",
      Language::Clojure => "Clojure",
      Language::CMake => "CMake",
      Language::CoffeeScript => "CoffeeScript",
      Language::CommonLisp => "CommonLisp",
      Language::ConfigFile => "ConfigFile",
      Language::Console => "Console",
      Language::Coq => "Coq",
      Language::Crystal => "Crystal",
      Language::Css => "Css",
      Language::Cuda => "Cuda",
      Language::D => "D",
      Language::Dart => "Dart",
      Language::Diff => "Diff",
      Language::Digdag => "Digdag",
      Language::Docker => "Docker",
      Language::Dot => "Dot",
      Language::Eiffel => "Eiffel",
      Language::Elixir => "Elixir",
      Language::Elm => "Elm",
      Language::Erb => "Erb",
      Language::Erlang => "Erlang",
      Language::Escape => "Escape",
      Language::Factor => "Factor",
      Language::Fortran => "Fortran",
      Language::FSharp => "FSharp",
      Language::GdScript => "GdScript",
      Language::Gherkin => "Gherkin",
      Language::Glsl => "Glsl",
      Language::Go => "Go",
      Language::Gradle => "Gradle",
      Language::Graphql => "Graphql",
      Language::Groovy => "Groovy",
      Language::Hack => "Hack",
      Language::Haml => "Haml",
      Language::Handlebars => "Handlebars",
      Language::HashicorpConfigurationLanguage => "HashicorpConfigurationLanguage",
      Language::Haskell => "Haskell",
      Language::Hocon => "Hocon",
      Language::Html => "Html",
      Language::Http => "Http",
      Language::HyLang => "HyLang",
      Language::Idl => "Idl",
      Language::IgorPro => "IgorPro",
      Language::Ini => "Ini",
      Language::Io => "Io",
      Language::IrbOutput => "IrbOutput",
      Language::Irb => "Irb",
      Language::Java => "Java",
      Language::JavaScript => "JavaScript",
      Language::Jinja => "Jinja",
      Language::JsonDoc => "JsonDoc",
      Language::Json => "Json",
      Language::Jsonnet => "Jsonnet",
      Language::Jsp => "Jsp",
      Language::Jsx => "Jsx",
      Language::Julia => "Julia",
      Language::Kotlin => "Kotlin",
      Language::Lasso => "Lasso",
      Language::Liquid => "Liquid",
      Language::LiterateCoffeeScript => "LiterateCoffeeScript",
      Language::LiterateHaskell => "LiterateHaskell",
      Language::Llvm => "Llvm",
      Language::Lua => "Lua",
      Language::M68k => "M68k",
      Language::Magik => "Magik",
      Language::Make => "Make",
      Language::Markdown => "Markdown",
      Language::Mason => "Mason",
      Language::Mathematica => "Mathematica",
      Language::Matlab => "Matlab",
      Language::MoonScript => "MoonScript",
      Language::Mosel => "Mosel",
      Language::Mxml => "Mxml",
      Language::Nasm => "Nasm",
      Language::Nginx => "Nginx",
      Language::Nim => "Nim",
      Language::Nix => "Nix",
      Language::ObjectiveC => "ObjectiveC",
      Language::OCaml => "OCaml",
      Language::OpenEdgeAbl => "OpenEdgeAbl",
      Language::OpenTypeFeatureFile => "OpenTypeFeatureFile",
      Language::Pascal => "Pascal",
      Language::Perl => "Perl",
      Language::Php => "Php",
      Language::PlainText => "PlainText",
      Language::Plist => "Plist",
      Language::Pony => "Pony",
      Language::Powershell => "Powershell",
      Language::Praat => "Praat",
      Language::Prolog => "Prolog",
      Language::Prometheus => "Prometheus",
      Language::Protobuf => "Protobuf",
      Language::Puppet => "Puppet",
      Language::Python => "Python",
      Language::Q => "Q",
      Language::Qml => "Qml",
      Language::R => "R",
      Language::Racket => "Racket",
      Language::ReasonMl => "ReasonMl",
      Language::Ruby => "Ruby",
      Language::Rust => "Rust",
      Language::Sas => "Sas",
      Language::Sass => "Sass",
      Language::Scala => "Scala",
      Language::Scheme => "Scheme",
      Language::Scss => "Scss",
      Language::Sed => "Sed",
      Language::Shell => "Shell",
      Language::Sieve => "Sieve",
      Language::Slim => "Slim",
      Language::Smalltalk => "Smalltalk",
      Language::Smarty => "Smarty",
      Language::Sml => "Sml",
      Language::Sqf => "Sqf",
      Language::Sql => "Sql",
      Language::SuperCollider => "SuperCollider",
      Language::Swift => "Swift",
      Language::Tap => "Tap",
      Language::Tcl => "Tcl",
      Language::Terraform => "Terraform",
      Language::Tex => "Tex",
      Language::Toml => "Toml",
      Language::Tulip => "Tulip",
      Language::TurtleTrig => "TurtleTrig",
      Language::Twig => "Twig",
      Language::TypeScript => "TypeScript",
      Language::Vala => "Vala",
      Language::Verilog => "Verilog",
      Language::Vhdl2008 => "Vhdl2008",
      Language::VimL => "VimL",
      Language::VisualBasic => "VisualBasic",
      Language::Vue => "Vue",
      Language::Wollok => "Wollok",
      Language::Xml => "Xml",
      Language::Xojo => "Xojo",
      Language::XPath => "XPath",
      Language::XQuery => "XQuery",
      Language::Yaml => "Yaml",
    }
  }

  pub fn from_str(input: &str) -> Option<Language> {
    let lang = match input.to_lowercase().as_str() {
      "dotproperties" => Language::DotProperties,
      "onecbsl" => Language::OneCBsl,
      "abap" => Language::Abap,
      "actionscript" => Language::ActionScript,
      "ada" => Language::Ada,
      "apache" => Language::Apache,
      "apiblueprint" => Language::ApiBlueprint,
      "applescript" => Language::AppleScript,
      "awk" => Language::Awk,
      "biml" => Language::Biml,
      "bpf" => Language::Bpf,
      "brainfuck" => Language::Brainfuck,
      "c" => Language::C,
      "csharp" => Language::CSharp,
      "cplusplus" => Language::CPlusPlus,
      "ceylon" => Language::Ceylon,
      "cfscript" => Language::CfScript,
      "clojure" => Language::Clojure,
      "cmake" => Language::CMake,
      "coffeescript" => Language::CoffeeScript,
      "commonlisp" => Language::CommonLisp,
      "configfile" => Language::ConfigFile,
      "console" => Language::Console,
      "coq" => Language::Coq,
      "crystal" => Language::Crystal,
      "css" => Language::Css,
      "cuda" => Language::Cuda,
      "d" => Language::D,
      "dart" => Language::Dart,
      "diff" => Language::Diff,
      "digdag" => Language::Digdag,
      "docker" => Language::Docker,
      "dot" => Language::Dot,
      "eiffel" => Language::Eiffel,
      "elixir" => Language::Elixir,
      "elm" => Language::Elm,
      "erb" => Language::Erb,
      "erlang" => Language::Erlang,
      "escape" => Language::Escape,
      "factor" => Language::Factor,
      "fortran" => Language::Fortran,
      "fsharp" => Language::FSharp,
      "gdscript" => Language::GdScript,
      "gherkin" => Language::Gherkin,
      "glsl" => Language::Glsl,
      "go" => Language::Go,
      "gradle" => Language::Gradle,
      "graphql" => Language::Graphql,
      "groovy" => Language::Groovy,
      "hack" => Language::Hack,
      "haml" => Language::Haml,
      "handlebars" => Language::Handlebars,
      "hashicorpconfigurationLanguage" => Language::HashicorpConfigurationLanguage,
      "haskell" => Language::Haskell,
      "hocon" => Language::Hocon,
      "html" => Language::Html,
      "http" => Language::Http,
      "hylang" => Language::HyLang,
      "idl" => Language::Idl,
      "igorpro" => Language::IgorPro,
      "ini" => Language::Ini,
      "io" => Language::Io,
      "irboutput" => Language::IrbOutput,
      "irb" => Language::Irb,
      "java" => Language::Java,
      "javascript" => Language::JavaScript,
      "jinja" => Language::Jinja,
      "jsondoc" => Language::JsonDoc,
      "json" => Language::Json,
      "jsonnet" => Language::Jsonnet,
      "jsp" => Language::Jsp,
      "jsx" => Language::Jsx,
      "julia" => Language::Julia,
      "kotlin" => Language::Kotlin,
      "lasso" => Language::Lasso,
      "liquid" => Language::Liquid,
      "literatecoffeescript" => Language::LiterateCoffeeScript,
      "literatehaskell" => Language::LiterateHaskell,
      "llvm" => Language::Llvm,
      "lua" => Language::Lua,
      "m68k" => Language::M68k,
      "magik" => Language::Magik,
      "make" => Language::Make,
      "markdown" => Language::Markdown,
      "mason" => Language::Mason,
      "mathematica" => Language::Mathematica,
      "matlab" => Language::Matlab,
      "moonscript" => Language::MoonScript,
      "mosel" => Language::Mosel,
      "mxml" => Language::Mxml,
      "nasm" => Language::Nasm,
      "nginx" => Language::Nginx,
      "nim" => Language::Nim,
      "nix" => Language::Nix,
      "objectivec" => Language::ObjectiveC,
      "ocaml" => Language::OCaml,
      "openedgeabl" => Language::OpenEdgeAbl,
      "opentypefeaturefile" => Language::OpenTypeFeatureFile,
      "pascal" => Language::Pascal,
      "perl" => Language::Perl,
      "php" => Language::Php,
      "plaintext" => Language::PlainText,
      "plist" => Language::Plist,
      "pony" => Language::Pony,
      "powershell" => Language::Powershell,
      "praat" => Language::Praat,
      "prolog" => Language::Prolog,
      "prometheus" => Language::Prometheus,
      "protobuf" => Language::Protobuf,
      "puppet" => Language::Puppet,
      "python" => Language::Python,
      "q" => Language::Q,
      "qml" => Language::Qml,
      "r" => Language::R,
      "racket" => Language::Racket,
      "reasonml" => Language::ReasonMl,
      "ruby" => Language::Ruby,
      "rust" => Language::Rust,
      "sas" => Language::Sas,
      "sass" => Language::Sass,
      "scala" => Language::Scala,
      "scheme" => Language::Scheme,
      "scss" => Language::Scss,
      "sed" => Language::Sed,
      "shell" => Language::Shell,
      "sieve" => Language::Sieve,
      "slim" => Language::Slim,
      "smalltalk" => Language::Smalltalk,
      "smarty" => Language::Smarty,
      "sml" => Language::Sml,
      "sqf" => Language::Sqf,
      "sql" => Language::Sql,
      "supercollider" => Language::SuperCollider,
      "swift" => Language::Swift,
      "tap" => Language::Tap,
      "tcl" => Language::Tcl,
      "terraform" => Language::Terraform,
      "tex" => Language::Tex,
      "toml" => Language::Toml,
      "tulip" => Language::Tulip,
      "turtletrig" => Language::TurtleTrig,
      "twig" => Language::Twig,
      "typescript" => Language::TypeScript,
      "vala" => Language::Vala,
      "verilog" => Language::Verilog,
      "vhdl2008" => Language::Vhdl2008,
      "viml" => Language::VimL,
      "visualbasic" => Language::VisualBasic,
      "vue" => Language::Vue,
      "wollok" => Language::Wollok,
      "xml" => Language::Xml,
      "xojo" => Language::Xojo,
      "xpath" => Language::XPath,
      "xquery" => Language::XQuery,
      "yaml" => Language::Yaml,
      _ => return None,
    };

    Some(lang)
  }

  pub fn rouge(self) -> &'static str {
    match self {
      Language::DotProperties => "dotproperties",
      Language::OneCBsl => "bsl",
      Language::Abap => "abap",
      Language::ActionScript => "actionscript",
      Language::Ada => "ada",
      Language::Apache => "apache",
      Language::ApiBlueprint => "apiblueprint",
      Language::AppleScript => "applescript",
      Language::Awk => "awk",
      Language::Biml => "biml",
      Language::Bpf => "bpf",
      Language::Brainfuck => "brainfuck",
      Language::C => "c",
      Language::CSharp => "csharp",
      Language::CPlusPlus => "cpp",
      Language::Ceylon => "ceylon",
      Language::CfScript => "cfscript",
      Language::Clojure => "clojure",
      Language::CMake => "cmake",
      Language::CoffeeScript => "coffeescript",
      Language::CommonLisp => "common_lisp",
      Language::ConfigFile => "conf",
      Language::Console => "console",
      Language::Coq => "coq",
      Language::Crystal => "crystal",
      Language::Css => "css",
      Language::Cuda => "cuda",
      Language::D => "d",
      Language::Dart => "dart",
      Language::Diff => "diff",
      Language::Digdag => "digdag",
      Language::Docker => "docker",
      Language::Dot => "dot",
      Language::Eiffel => "eiffel",
      Language::Elixir => "elixir",
      Language::Elm => "elm",
      Language::Erb => "erb",
      Language::Erlang => "erlang",
      Language::Escape => "escape",
      Language::Factor => "factor",
      Language::Fortran => "fortran",
      Language::FSharp => "fsharp",
      Language::GdScript => "gdscript",
      Language::Gherkin => "gherkin",
      Language::Glsl => "glsl",
      Language::Go => "go",
      Language::Gradle => "gradle",
      Language::Graphql => "graphql",
      Language::Groovy => "groovy",
      Language::Hack => "hack",
      Language::Haml => "haml",
      Language::Handlebars => "handlebars",
      Language::HashicorpConfigurationLanguage => "hcl",
      Language::Haskell => "haskell",
      Language::Hocon => "hocon",
      Language::Html => "html",
      Language::Http => "http",
      Language::HyLang => "hylang",
      Language::Idl => "idlang",
      Language::IgorPro => "igorpro",
      Language::Ini => "ini",
      Language::Io => "io",
      Language::IrbOutput => "irb_output",
      Language::Irb => "irb",
      Language::Java => "java",
      Language::JavaScript => "javascript",
      Language::Jinja => "jinga",
      Language::JsonDoc => "json-doc",
      Language::Json => "json",
      Language::Jsonnet => "jsonnet",
      Language::Jsp => "jsp",
      Language::Jsx => "jsx",
      Language::Julia => "julia",
      Language::Kotlin => "kotlin",
      Language::Lasso => "lasso",
      Language::Liquid => "liquid",
      Language::LiterateCoffeeScript => "literate_coffeescript",
      Language::LiterateHaskell => "literate_haskell",
      Language::Llvm => "llvm",
      Language::Lua => "lua",
      Language::M68k => "m68k",
      Language::Magik => "magik",
      Language::Make => "make",
      Language::Markdown => "markdown",
      Language::Mason => "mason",
      Language::Mathematica => "mathematica",
      Language::Matlab => "matlab",
      Language::MoonScript => "moonscript",
      Language::Mosel => "mosel",
      Language::Mxml => "mxml",
      Language::Nasm => "nasm",
      Language::Nginx => "nginx",
      Language::Nim => "nim",
      Language::Nix => "nix",
      Language::ObjectiveC => "objective_c",
      Language::OCaml => "ocaml",
      Language::OpenEdgeAbl => "openedge",
      Language::OpenTypeFeatureFile => "opentype_feature_file",
      Language::Pascal => "pascal",
      Language::Perl => "perl",
      Language::Php => "php",
      Language::PlainText => "plaintext",
      Language::Plist => "plist",
      Language::Pony => "pony",
      Language::Powershell => "powershell",
      Language::Praat => "praat",
      Language::Prolog => "prolog",
      Language::Prometheus => "prometheus",
      Language::Protobuf => "protobuf",
      Language::Puppet => "puppet",
      Language::Python => "python",
      Language::Q => "q",
      Language::Qml => "qml",
      Language::R => "r",
      Language::Racket => "racket",
      Language::ReasonMl => "reasonml",
      Language::Ruby => "ruby",
      Language::Rust => "rust",
      Language::Sas => "sas",
      Language::Sass => "sass",
      Language::Scala => "scala",
      Language::Scheme => "scheme",
      Language::Scss => "scss",
      Language::Sed => "sed",
      Language::Shell => "shell",
      Language::Sieve => "sieve",
      Language::Slim => "slim",
      Language::Smalltalk => "smalltalk",
      Language::Smarty => "smarty",
      Language::Sml => "sml",
      Language::Sqf => "sqf",
      Language::Sql => "sql",
      Language::SuperCollider => "supercollider",
      Language::Swift => "swift",
      Language::Tap => "tap",
      Language::Tcl => "tcl",
      Language::Terraform => "terraform",
      Language::Tex => "tex",
      Language::Toml => "toml",
      Language::Tulip => "tulip",
      Language::TurtleTrig => "turtle",
      Language::Twig => "twig",
      Language::TypeScript => "tsx",
      Language::Vala => "vala",
      Language::Verilog => "verilog",
      Language::Vhdl2008 => "vhdl",
      Language::VimL => "viml",
      Language::VisualBasic => "vb",
      Language::Vue => "vue",
      Language::Wollok => "wollok",
      Language::Xml => "xml",
      Language::Xojo => "xojo",
      Language::XPath => "xpath",
      Language::XQuery => "xquery",
      Language::Yaml => "yaml",
    }
  }

  pub fn from_rouge(input: &str) -> Option<Self> {
    let lang = match input.to_lowercase().as_str() {
      "dotproperties" => Language::DotProperties,
      "bsl" => Language::OneCBsl,
      "abap" => Language::Abap,
      "actionscript" => Language::ActionScript,
      "ada" => Language::Ada,
      "apache" => Language::Apache,
      "apiblueprint" => Language::ApiBlueprint,
      "applescript" => Language::AppleScript,
      "awk" => Language::Awk,
      "biml" => Language::Biml,
      "bpf" => Language::Bpf,
      "brainfuck" => Language::Brainfuck,
      "c" => Language::C,
      "csharp" => Language::CSharp,
      "cpp" => Language::CPlusPlus,
      "ceylon" => Language::Ceylon,
      "cfscript" => Language::CfScript,
      "clojure" => Language::Clojure,
      "cmake" => Language::CMake,
      "coffeescript" => Language::CoffeeScript,
      "common_lisp" => Language::CommonLisp,
      "conf" => Language::ConfigFile,
      "console" => Language::Console,
      "coq" => Language::Coq,
      "crystal" => Language::Crystal,
      "css" => Language::Css,
      "cuda" => Language::Cuda,
      "d" => Language::D,
      "dart" => Language::Dart,
      "diff" => Language::Diff,
      "digdag" => Language::Digdag,
      "docker" => Language::Docker,
      "dot" => Language::Dot,
      "eiffel" => Language::Eiffel,
      "elixir" => Language::Elixir,
      "elm" => Language::Elm,
      "erb" => Language::Erb,
      "erlang" => Language::Erlang,
      "escape" => Language::Escape,
      "factor" => Language::Factor,
      "fortran" => Language::Fortran,
      "fsharp" => Language::FSharp,
      "gdscript" => Language::GdScript,
      "gherkin" => Language::Gherkin,
      "glsl" => Language::Glsl,
      "go" => Language::Go,
      "gradle" => Language::Gradle,
      "graphql" => Language::Graphql,
      "groovy" => Language::Groovy,
      "hack" => Language::Hack,
      "haml" => Language::Haml,
      "handlebars" => Language::Handlebars,
      "hcl" => Language::HashicorpConfigurationLanguage,
      "haskell" => Language::Haskell,
      "hocon" => Language::Hocon,
      "html" => Language::Html,
      "http" => Language::Http,
      "hylang" => Language::HyLang,
      "idlang" => Language::Idl,
      "igorpro" => Language::IgorPro,
      "ini" => Language::Ini,
      "io" => Language::Io,
      "irb_output" => Language::IrbOutput,
      "irb" => Language::Irb,
      "java" => Language::Java,
      "javascript" => Language::JavaScript,
      "jinga" => Language::Jinja,
      "json-doc" => Language::JsonDoc,
      "json" => Language::Json,
      "jsonnet" => Language::Jsonnet,
      "jsp" => Language::Jsp,
      "jsx" => Language::Jsx,
      "julia" => Language::Julia,
      "kotlin" => Language::Kotlin,
      "lasso" => Language::Lasso,
      "liquid" => Language::Liquid,
      "literate_coffeescript" => Language::LiterateCoffeeScript,
      "literate_haskell" => Language::LiterateHaskell,
      "llvm" => Language::Llvm,
      "lua" => Language::Lua,
      "m68k" => Language::M68k,
      "magik" => Language::Magik,
      "make" => Language::Make,
      "markdown" => Language::Markdown,
      "mason" => Language::Mason,
      "mathematica" => Language::Mathematica,
      "matlab" => Language::Matlab,
      "moonscript" => Language::MoonScript,
      "mosel" => Language::Mosel,
      "mxml" => Language::Mxml,
      "nasm" => Language::Nasm,
      "nginx" => Language::Nginx,
      "nim" => Language::Nim,
      "nix" => Language::Nix,
      "objective_c" => Language::ObjectiveC,
      "ocaml" => Language::OCaml,
      "openedge" => Language::OpenEdgeAbl,
      "opentype_feature_file" => Language::OpenTypeFeatureFile,
      "pascal" => Language::Pascal,
      "perl" => Language::Perl,
      "php" => Language::Php,
      "plaintext" => Language::PlainText,
      "plist" => Language::Plist,
      "pony" => Language::Pony,
      "powershell" => Language::Powershell,
      "praat" => Language::Praat,
      "prolog" => Language::Prolog,
      "prometheus" => Language::Prometheus,
      "protobuf" => Language::Protobuf,
      "puppet" => Language::Puppet,
      "python" => Language::Python,
      "q" => Language::Q,
      "qml" => Language::Qml,
      "r" => Language::R,
      "racket" => Language::Racket,
      "reasonml" => Language::ReasonMl,
      "ruby" => Language::Ruby,
      "rust" => Language::Rust,
      "sas" => Language::Sas,
      "sass" => Language::Sass,
      "scala" => Language::Scala,
      "scheme" => Language::Scheme,
      "scss" => Language::Scss,
      "sed" => Language::Sed,
      "shell" => Language::Shell,
      "sieve" => Language::Sieve,
      "slim" => Language::Slim,
      "smalltalk" => Language::Smalltalk,
      "smarty" => Language::Smarty,
      "sml" => Language::Sml,
      "sqf" => Language::Sqf,
      "sql" => Language::Sql,
      "supercollider" => Language::SuperCollider,
      "swift" => Language::Swift,
      "tap" => Language::Tap,
      "tcl" => Language::Tcl,
      "terraform" => Language::Terraform,
      "tex" => Language::Tex,
      "toml" => Language::Toml,
      "tulip" => Language::Tulip,
      "turtle" => Language::TurtleTrig,
      "twig" => Language::Twig,
      "tsx" => Language::TypeScript,
      "vala" => Language::Vala,
      "verilog" => Language::Verilog,
      "vhdl" => Language::Vhdl2008,
      "viml" => Language::VimL,
      "vb" => Language::VisualBasic,
      "vue" => Language::Vue,
      "wollok" => Language::Wollok,
      "xml" => Language::Xml,
      "xojo" => Language::Xojo,
      "xpath" => Language::XPath,
      "xquery" => Language::XQuery,
      "yaml" => Language::Yaml,
      _ => return None,
    };

    Some(lang)
  }

  pub fn pretty(self) -> &'static str {
    match self {
      Language::DotProperties => ".properties",
      Language::OneCBsl => "1C (BSL)",
      Language::Abap => "ABAP",
      Language::ActionScript => "ActionScript",
      Language::Ada => "Ada",
      Language::Apache => "Apache",
      Language::ApiBlueprint => "API Blueprint",
      Language::AppleScript => "AppleScript",
      Language::Awk => "Awk",
      Language::Biml => "BIML",
      Language::Bpf => "BPF",
      Language::Brainfuck => "Brainfuck",
      Language::C => "C",
      Language::CSharp => "C#",
      Language::CPlusPlus => "C++",
      Language::Ceylon => "Ceylon",
      Language::CfScript => "CFScript",
      Language::Clojure => "Clojure",
      Language::CMake => "CMake",
      Language::CoffeeScript => "CoffeeScript",
      Language::CommonLisp => "Common Lisp",
      Language::ConfigFile => "Config File",
      Language::Console => "Console",
      Language::Coq => "Coq",
      Language::Crystal => "Crystal",
      Language::Css => "CSS",
      Language::Cuda => "CUDA",
      Language::D => "D",
      Language::Dart => "Dart",
      Language::Diff => "diff",
      Language::Digdag => "digdag",
      Language::Docker => "Docker",
      Language::Dot => "DOT",
      Language::Eiffel => "Eiffel",
      Language::Elixir => "Elixir",
      Language::Elm => "Elm",
      Language::Erb => "ERB",
      Language::Erlang => "Erlang",
      Language::Escape => "Escape",
      Language::Factor => "Factor",
      Language::Fortran => "Fortran",
      Language::FSharp => "FSharp",
      Language::GdScript => "GDScript",
      Language::Gherkin => "Gherkin",
      Language::Glsl => "GLSL",
      Language::Go => "Go",
      Language::Gradle => "Gradle",
      Language::Graphql => "Graphql",
      Language::Groovy => "Groovy",
      Language::Hack => "Hack",
      Language::Haml => "Haml",
      Language::Handlebars => "Handlebars",
      Language::HashicorpConfigurationLanguage => "Hashicorp Configuration Language",
      Language::Haskell => "Haskell",
      Language::Hocon => "HOCON",
      Language::Html => "HTML",
      Language::Http => "HTTP",
      Language::HyLang => "HyLang",
      Language::Idl => "IDL",
      Language::IgorPro => "IgorPro",
      Language::Ini => "INI",
      Language::Io => "Io",
      Language::IrbOutput => "Irb",
      Language::Irb => "Irb_output",
      Language::Java => "Java",
      Language::JavaScript => "JavaScript",
      Language::Jinja => "Jinja",
      Language::JsonDoc => "JSON",
      Language::Json => "Json-doc",
      Language::Jsonnet => "Jsonnet",
      Language::Jsp => "Jsp",
      Language::Jsx => "JSX",
      Language::Julia => "Julia",
      Language::Kotlin => "Kotlin",
      Language::Lasso => "Lasso",
      Language::Liquid => "Liquid",
      Language::LiterateCoffeeScript => "Literate CoffeeScript",
      Language::LiterateHaskell => "Literate Haskell",
      Language::Llvm => "LLVM",
      Language::Lua => "Lua",
      Language::M68k => "M68k",
      Language::Magik => "Magik",
      Language::Make => "Make",
      Language::Markdown => "Markdown",
      Language::Mason => "Mason",
      Language::Mathematica => "Mathematica",
      Language::Matlab => "MATLAB",
      Language::MoonScript => "MoonScript",
      Language::Mosel => "Mosel",
      Language::Mxml => "MXML",
      Language::Nasm => "Nasm",
      Language::Nginx => "nginx",
      Language::Nim => "Nim",
      Language::Nix => "Nix",
      Language::ObjectiveC => "Objective-C",
      Language::OCaml => "OCaml",
      Language::OpenEdgeAbl => "OpenEdge ABL",
      Language::OpenTypeFeatureFile => "OpenType Feature File",
      Language::Pascal => "Pascal",
      Language::Perl => "Perl",
      Language::Php => "PHP",
      Language::PlainText => "Plain Text",
      Language::Plist => "Plist",
      Language::Pony => "Pony",
      Language::Powershell => "powershell",
      Language::Praat => "Praat",
      Language::Prolog => "Prolog",
      Language::Prometheus => "Prometheus",
      Language::Protobuf => "Protobuf",
      Language::Puppet => "Puppet",
      Language::Python => "Python",
      Language::Q => "Q",
      Language::Qml => "QML",
      Language::R => "R",
      Language::Racket => "Racket",
      Language::ReasonMl => "ReasonML",
      Language::Ruby => "Ruby",
      Language::Rust => "Rust",
      Language::Sas => "SAS",
      Language::Sass => "Sass",
      Language::Scala => "Scala",
      Language::Scheme => "Scheme",
      Language::Scss => "SCSS",
      Language::Sed => "sed",
      Language::Shell => "shell",
      Language::Sieve => "Sieve",
      Language::Slim => "Slim",
      Language::Smalltalk => "Smalltalk",
      Language::Smarty => "Smarty",
      Language::Sml => "SML",
      Language::Sqf => "SQF",
      Language::Sql => "SQL",
      Language::SuperCollider => "SuperCollider",
      Language::Swift => "Swift",
      Language::Tap => "TAP",
      Language::Tcl => "Tcl",
      Language::Terraform => "Terraform",
      Language::Tex => "TeX",
      Language::Toml => "TOML",
      Language::Tulip => "Tulip",
      Language::TurtleTrig => "Turtle/TriG",
      Language::Twig => "Twig",
      Language::TypeScript => "TypeScript",
      Language::Vala => "Vala",
      Language::Verilog => "Verilog and System Verilog",
      Language::Vhdl2008 => "VHDL 2008",
      Language::VimL => "VimL",
      Language::VisualBasic => "Visual Basic",
      Language::Vue => "Vue",
      Language::Wollok => "Wollok",
      Language::Xml => "XML",
      Language::Xojo => "Xojo",
      Language::XPath => "XPath",
      Language::XQuery => "XQuery",
      Language::Yaml => "YAML",
    }
  }

  pub fn from_pretty(input: &str) -> Option<Self> {
    let lang = match input.to_lowercase().as_str() {
      ".properties" => Language::DotProperties,
      "1c (bsl)" => Language::OneCBsl,
      "abap" => Language::Abap,
      "actionscript" => Language::ActionScript,
      "ada" => Language::Ada,
      "apache" => Language::Apache,
      "api blueprint" => Language::ApiBlueprint,
      "applescript" => Language::AppleScript,
      "awk" => Language::Awk,
      "biml" => Language::Biml,
      "bpf" => Language::Bpf,
      "brainfuck" => Language::Brainfuck,
      "c" => Language::C,
      "c#" => Language::CSharp,
      "c++" => Language::CPlusPlus,
      "ceylon" => Language::Ceylon,
      "cfscript" => Language::CfScript,
      "clojure" => Language::Clojure,
      "cmake" => Language::CMake,
      "coffeescript" => Language::CoffeeScript,
      "common lisp" => Language::CommonLisp,
      "config file" => Language::ConfigFile,
      "console" => Language::Console,
      "coq" => Language::Coq,
      "crystal" => Language::Crystal,
      "css" => Language::Css,
      "cuda" => Language::Cuda,
      "d" => Language::D,
      "dart" => Language::Dart,
      "diff" => Language::Diff,
      "digdag" => Language::Digdag,
      "docker" => Language::Docker,
      "dot" => Language::Dot,
      "eiffel" => Language::Eiffel,
      "elixir" => Language::Elixir,
      "elm" => Language::Elm,
      "erb" => Language::Erb,
      "erlang" => Language::Erlang,
      "escape" => Language::Escape,
      "factor" => Language::Factor,
      "fortran" => Language::Fortran,
      "fsharp" => Language::FSharp,
      "gdscript" => Language::GdScript,
      "gherkin" => Language::Gherkin,
      "glsl" => Language::Glsl,
      "go" => Language::Go,
      "gradle" => Language::Gradle,
      "graphql" => Language::Graphql,
      "groovy" => Language::Groovy,
      "hack" => Language::Hack,
      "haml" => Language::Haml,
      "handlebars" => Language::Handlebars,
      "hashicorp configuration language" => Language::HashicorpConfigurationLanguage,
      "haskell" => Language::Haskell,
      "hocon" => Language::Hocon,
      "html" => Language::Html,
      "http" => Language::Http,
      "hylang" => Language::HyLang,
      "idl" => Language::Idl,
      "igorpro" => Language::IgorPro,
      "ini" => Language::Ini,
      "io" => Language::Io,
      "irb" => Language::IrbOutput,
      "irb_output" => Language::Irb,
      "java" => Language::Java,
      "javascript" => Language::JavaScript,
      "jinja" => Language::Jinja,
      "json" => Language::JsonDoc,
      "json-doc" => Language::Json,
      "jsonnet" => Language::Jsonnet,
      "jsp" => Language::Jsp,
      "jsx" => Language::Jsx,
      "julia" => Language::Julia,
      "kotlin" => Language::Kotlin,
      "lasso" => Language::Lasso,
      "liquid" => Language::Liquid,
      "literate coffeescript" => Language::LiterateCoffeeScript,
      "literate haskell" => Language::LiterateHaskell,
      "llvm" => Language::Llvm,
      "lua" => Language::Lua,
      "m68k" => Language::M68k,
      "magik" => Language::Magik,
      "make" => Language::Make,
      "markdown" => Language::Markdown,
      "mason" => Language::Mason,
      "mathematica" => Language::Mathematica,
      "matlab" => Language::Matlab,
      "moonscript" => Language::MoonScript,
      "mosel" => Language::Mosel,
      "mxml" => Language::Mxml,
      "nasm" => Language::Nasm,
      "nginx" => Language::Nginx,
      "nim" => Language::Nim,
      "nix" => Language::Nix,
      "objective-c" => Language::ObjectiveC,
      "ocaml" => Language::OCaml,
      "openedge abl" => Language::OpenEdgeAbl,
      "opentype feature file" => Language::OpenTypeFeatureFile,
      "pascal" => Language::Pascal,
      "perl" => Language::Perl,
      "php" => Language::Php,
      "plain text" => Language::PlainText,
      "plist" => Language::Plist,
      "pony" => Language::Pony,
      "powershell" => Language::Powershell,
      "praat" => Language::Praat,
      "prolog" => Language::Prolog,
      "prometheus" => Language::Prometheus,
      "protobuf" => Language::Protobuf,
      "puppet" => Language::Puppet,
      "python" => Language::Python,
      "q" => Language::Q,
      "qml" => Language::Qml,
      "r" => Language::R,
      "racket" => Language::Racket,
      "reasonml" => Language::ReasonMl,
      "ruby" => Language::Ruby,
      "rust" => Language::Rust,
      "sas" => Language::Sas,
      "sass" => Language::Sass,
      "scala" => Language::Scala,
      "scheme" => Language::Scheme,
      "scss" => Language::Scss,
      "sed" => Language::Sed,
      "shell" => Language::Shell,
      "sieve" => Language::Sieve,
      "slim" => Language::Slim,
      "smalltalk" => Language::Smalltalk,
      "smarty" => Language::Smarty,
      "sml" => Language::Sml,
      "sqf" => Language::Sqf,
      "sql" => Language::Sql,
      "supercollider" => Language::SuperCollider,
      "swift" => Language::Swift,
      "tap" => Language::Tap,
      "tcl" => Language::Tcl,
      "terraform" => Language::Terraform,
      "tex" => Language::Tex,
      "toml" => Language::Toml,
      "tulip" => Language::Tulip,
      "turtle/trig" => Language::TurtleTrig,
      "twig" => Language::Twig,
      "typescript" => Language::TypeScript,
      "vala" => Language::Vala,
      "verilog and system verilog" => Language::Verilog,
      "vhdl 2008" => Language::Vhdl2008,
      "viml" => Language::VimL,
      "visual basic" => Language::VisualBasic,
      "vue" => Language::Vue,
      "wollok" => Language::Wollok,
      "xml" => Language::Xml,
      "xojo" => Language::Xojo,
      "xpath" => Language::XPath,
      "xquery" => Language::XQuery,
      "yaml" => Language::Yaml,
      _ => return None,
    };

    Some(lang)
  }

  pub fn context() -> Vec<(String, &'static str, &'static str)> {
    Language::ALL
      .iter()
      .map(|x| (x.as_str().to_lowercase(), x.pretty(), x.rouge()))
      .collect()
  }
}

impl<DB: Backend<RawValue = [u8]>> Queryable<Text, DB> for Language {
  type Row = String;

  fn build(row: Self::Row) -> Self {
    Language::from_str(&row).unwrap_or(Language::PlainText)
  }
}

impl<DB: Backend> ToSql<Text, DB> for Language {
  fn to_sql<W: Write>(&self, out: &mut serialize::Output<W, DB>) -> serialize::Result {
    <str as ToSql<Text, DB>>::to_sql(self.as_str(), out)
  }
}

impl<DB: Backend<RawValue = [u8]>> FromSql<Text, DB> for Language {
  fn from_sql(bytes: Option<&DB::RawValue>) -> deserialize::Result<Self> {
    let input = <String as FromSql<Text, DB>>::from_sql(bytes)?;
    match Language::from_str(&input) {
      Some(l) => Ok(l),
      None => Err(Box::new(format_err!("bad language enum: {}", input).compat())),
    }
  }
}

impl FromFormValue<'v> for Language {
    type Error = &'v RawStr;

    fn from_form_value(form_value: &'v RawStr) -> Result<Self, Self::Error> {
      Language::from_str(form_value.as_str()).ok_or_else(|| form_value)
    }

    fn default() -> Option<Self> {
      None
    }
}
